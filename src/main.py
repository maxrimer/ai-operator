import sounddevice as sd
import numpy as np
import queue
import threading
import time
import logging
from typing import Literal, Optional
from stt_fw_class import STTFasterWhisperModel

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
SAMPLE_RATE = 16000  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è STT)
BLOCK_SIZE = 4000    # –î–ª–∏–Ω–∞ –±–ª–æ–∫–∞ (–≤ —Å—ç–º–ø–ª–∞—Ö) ‚Äî ~0.25 —Å–µ–∫
CHANNELS = 1
DEVICE = None        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
BUFFER_DURATION = 5  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É—Ñ–µ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_QUEUE_SIZE = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏

class AudioProcessor:
    def __init__(self, 
                 model_path: str, 
                 compute_type: str = 'int8', 
                 device: str = 'cpu', 
                 target_frequency: int = SAMPLE_RATE):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å STT –º–æ–¥–µ–ª—å—é."""
        try:
            self.stt_model = STTFasterWhisperModel(
                path_to_model=model_path, 
                compute_type=compute_type, 
                device=device,
                target_frequency=target_frequency
            )
            logger.info(f"STT –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ STT –º–æ–¥–µ–ª–∏: {e}")
            raise
        
        self.audio_queue = queue.Queue(maxsize=MAX_QUEUE_SIZE)
        self.buffer = np.empty((0,), dtype=np.float32)
        self.is_running = False
        self.worker_thread = None
        
    def read_audio_from_array(self, audio_array: np.ndarray, sample_rate: int,
                            mono_conversion_mode: Literal['average', 'alternate'] = 'average'):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è numpy –º–∞—Å—Å–∏–≤–∞ –≤ AudioFileData."""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if audio_array.size == 0:
                raise ValueError("–ü—É—Å—Ç–æ–π –∞—É–¥–∏–æ–º–∞—Å—Å–∏–≤")
            
            # –ï—Å–ª–∏ –∞—É–¥–∏–æ –¥–≤—É–º–µ—Ä–Ω–æ–µ (—Å—Ç–µ—Ä–µ–æ), –ø—Ä–∏–º–µ–Ω—è–µ–º –º–æ–Ω–æ-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            if audio_array.ndim == 2:
                if mono_conversion_mode == 'average':
                    audio_array = np.mean(audio_array, axis=1)
                elif mono_conversion_mode == 'alternate':
                    audio_array = np.vstack((audio_array[:, 0], audio_array[:, 1])).reshape((-1,), order='F')
                else:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ mono_conversion_mode: {mono_conversion_mode}")
                num_channels = 1
            elif audio_array.ndim == 1:
                num_channels = 1
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ñ–æ—Ä–º–∞ –º–∞—Å—Å–∏–≤–∞ –∞—É–¥–∏–æ: {audio_array.shape}")

            duration = len(audio_array) / sample_rate

            return {
                'audio_numpy': audio_array.astype(np.float32),
                'frequency': int(sample_rate),
                'num_channels': num_channels,
                'duration': duration
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ–º–∞—Å—Å–∏–≤–∞: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ–º–∞—Å—Å–∏–≤–∞: {e}")

    def audio_callback(self, indata, frames, time_info, status):
        """–ö–æ–ª–ª–±—ç–∫ –¥–ª—è sounddevice. –ü–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ—Ñ—Ä–µ–π–º—ã –∏ –ø–æ–º–µ—â–∞–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å."""
        if status:
            logger.warning(f"–°—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ: {status}")
        
        try:
            # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
            self.audio_queue.put_nowait(indata.copy())
        except queue.Full:
            # logger.warning("–û—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—Ä–µ–π–º")
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
            try:
                self.audio_queue.get_nowait()
                self.audio_queue.put_nowait(indata.copy())
            except queue.Empty:
                pass

    def stt_worker(self):
        """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
        logger.info("‚è∫Ô∏è –ù–∞—á–∞–ª—Å—è –∑–∞—Ö–≤–∞—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞. –ì–æ–≤–æ—Ä–∏—Ç–µ...")
        buffer_size_samples = SAMPLE_RATE * BUFFER_DURATION
        
        while self.is_running:
            try:
                # –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞
                data = self.audio_queue.get(timeout=1.0)
                data = data.flatten()

                self.buffer = np.concatenate((self.buffer, data))

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥—ã–µ BUFFER_DURATION —Å–µ–∫—É–Ω–¥ –∞—É–¥–∏–æ
                if len(self.buffer) >= buffer_size_samples:
                    logger.info(f"üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –¥–ª–∏–Ω–æ–π {BUFFER_DURATION} —Å–µ–∫—É–Ω–¥...")

                    try:
                        # –ë–µ—Ä–µ–º —Ç–æ—á–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤
                        audio_chunk = self.buffer[:buffer_size_samples]
                        
                        audio_data = self.read_audio_from_array(
                            audio_chunk, 
                            sample_rate=SAMPLE_RATE, 
                            mono_conversion_mode='average'
                        )
                        
                        result = self.stt_model.transcribe(
                            audio_array=audio_data['audio_numpy'], 
                            frequency=audio_data['frequency'])
                        
                        if result and result.get('text', '').strip():
                            logger.info(f"üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {result['text']}")
                        else:
                            logger.info("üîá –¢–∏—à–∏–Ω–∞ –∏–ª–∏ –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–∞—è —Ä–µ—á—å")
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ STT: {e}")

                    # –°–¥–≤–∏–≥–∞–µ–º –±—É—Ñ–µ—Ä (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏)
                    overlap_samples = SAMPLE_RATE  # 1 —Å–µ–∫—É–Ω–¥–∞
                    self.buffer = self.buffer[buffer_size_samples - overlap_samples:]
                    
            except queue.Empty:
                # –¢–∞–π–º–∞—É—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                continue
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ worker: {e}")
                
        logger.info("üõë STT worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def start(self):
        """–ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞."""
        if self.is_running:
            logger.warning("–ê—É–¥–∏–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        self.worker_thread = threading.Thread(target=self.stt_worker, daemon=True)
        self.worker_thread.start()
        
        try:
            with sd.InputStream(
                samplerate=SAMPLE_RATE,
                blocksize=BLOCK_SIZE,
                device=DEVICE,
                channels=CHANNELS,
                dtype='float32',
                callback=self.audio_callback
            ):
                logger.info("üé§ –ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
                while self.is_running:
                    time.sleep(0.1)
                    
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞: {e}")
        finally:
            self.stop()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        self.is_running = False
        
        if self.worker_thread and self.worker_thread.is_alive():
            self.worker_thread.join(timeout=2.0)
            if self.worker_thread.is_alive():
                logger.warning("Worker –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤ —Å—Ä–æ–∫")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices = sd.query_devices()
        logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        for i, device in enumerate(devices):
            logger.info(f"  {i}: {device['name']} ({'–≤—Ö–æ–¥' if device['max_input_channels'] > 0 else '–≤—ã—Ö–æ–¥'})")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        model_path = r'../models/faster-whisper-small'
        processor = AudioProcessor(model_path, compute_type='int8', device='cpu', target_frequency=SAMPLE_RATE)
        processor.start()
        
    except FileNotFoundError:
        logger.error("‚ùå –ú–æ–¥–µ–ª—å STT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏.")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()